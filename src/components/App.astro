---
// --- Constants ---
const API_BASE_URL =
	'https://site.api.espn.com/apis/site/v2/sports/soccer/all/scoreboard?dates='
// Use Set for efficient lookups
const EXCLUDED_LEAGUES = new Set([
	'2023-ncaa-division-i-men',
	'2024-ncaa-division-i-men',
	'2025-ncaa-division-i-men',
	11839, // NCAA Division I Men first-round playoffs
	11840, // NCAA Division I Men second-round playoffs
	'2023-ncaa-division-i-women',
	'2024-ncaa-division-i-women',
	'2025-ncaa-division-i-women',
	11788, // NCAA Division I Women first-round playoffs
	11789, // NCAA Division I Women second-round playoffs
	11790, // NCAA Division I Women third-round playoffs
	11791, // NCAA Division I Women quarterfinals
	'2023-24-russian-premier-league',
	'2024-25-russian-premier-league',
	'2023-24-ugandan-premier-league',
	'2024-25-ugandan-premier-league',
	'2023-malaysian-super-league',
	'2024-malaysian-super-league',
	'2025-malaysian-super-league',
])

// --- Helper Functions ---
function formatDateForAPI(date) {
	const year = date.getFullYear()
	const month = (date.getMonth() + 1).toString().padStart(2, '0')
	const day = date.getDate().toString().padStart(2, '0')
	return `${year}${month}${day}`
}

function formatTimeForDisplay(dateString) {
	try {
		const utcTime = new Date(dateString)
		return utcTime.toLocaleString('en-US', {
			hour12: true,
			hour: 'numeric',
			minute: '2-digit',
		})
	} catch (e) {
		console.error('Error formatting time:', dateString, e)
		return 'Invalid Time'
	}
}

function calculateWinnerType(homeWins, awayWins) {
	if (
		(homeWins >= 3 && awayWins <= 2 && homeWins - awayWins >= 3) ||
		(homeWins === 5 && awayWins <= 3)
	) {
		return 'home'
	}
	if (
		(awayWins >= 3 && homeWins <= 2 && awayWins - homeWins >= 3) ||
		(awayWins === 5 && homeWins <= 3)
	) {
		return 'away'
	}
	return null
}

function processEventData(event) {
	const competition = event.competitions[0]
	const homeCompetitor = competition.competitors[0]
	const awayCompetitor = competition.competitors[1]

	const homeTeamForm = homeCompetitor.form || ''
	const awayTeamForm = awayCompetitor.form || ''
	const homeTeamWins = [...homeTeamForm].filter(
		(c) => c.toLowerCase() === 'w'
	).length
	const awayTeamWins = [...awayTeamForm].filter(
		(c) => c.toLowerCase() === 'w'
	).length

	const winnerType = calculateWinnerType(homeTeamWins, awayTeamWins)
	const winnerName =
		winnerType === 'home'
			? homeCompetitor.team.name
			: winnerType === 'away'
			? awayCompetitor.team.name
			: ''

	const homeTeamWinsStr = String(homeTeamWins)
	const awayTeamWinsStr = String(awayTeamWins)

	return {
		league: event.season.type,
		leagueName: event.season.slug,
		leagueType: event.season.type,
		formattedTime: formatTimeForDisplay(event.date),
		homeTeamLogo: homeCompetitor.team.logo || '',
		homeTeam: homeCompetitor.team.name,
		homeTeamForm: homeTeamForm,
		homeTeamWins: homeTeamWinsStr,
		awayTeamLogo: awayCompetitor.team.logo || '',
		awayTeam: awayCompetitor.team.name,
		awayTeamForm: awayTeamForm,
		awayTeamWins: awayTeamWinsStr,
		winner: winnerName,
		record: `${homeTeamWins}-${awayTeamWins}`,
		odds: competition.odds?.[0]?.details || '',
		isPostponed: competition.status.type.description === 'Postponed',
		isCanceled: competition.status.type.description === 'Canceled',
	}
}

function filterMatch(match) {
	return (
		!EXCLUDED_LEAGUES.has(match.leagueName) &&
		!EXCLUDED_LEAGUES.has(match.leagueType) &&
		!match.isPostponed &&
		!match.isCanceled &&
		!!match.winner
	)
}

function formatLeagueName(slug) {
	return slug
		.replace(/-/g, ' ')
		.replace(/league/i, '')
		.replace(/^[0-9-]+/, '') // Remove leading year/numbers if present
		.trim()
		.split(' ')
		.map((word) => word.charAt(0).toUpperCase() + word.slice(1))
		.join(' ')
}

// This function builds and returns an HTML string
function renderLeagueHTML(matches) {
	// Ensure matches is an array and has at least one item
	if (!Array.isArray(matches) || matches.length === 0) {
		return '' // Return empty string if no matches
	}

	const leagueName = formatLeagueName(matches[0].leagueName)

	// Use .map().join('') to create the list of match rows HTML
	const matchesHTML = matches
		.map((match, index) => {
			// Determine conditional class string
			const conditionalClass = index > 0 ? 'pt-2' : ''
			// Generate logo HTML conditionally
			const homeLogoHTML = match.homeTeamLogo
				? `<img src="${match.homeTeamLogo}" alt="${match.homeTeam} logo" class="mr-1 h-5 w-5 object-contain sm:inline-block"/>`
				: ''
			const awayLogoHTML = match.awayTeamLogo
				? `<img src="${match.awayTeamLogo}" alt="${match.awayTeam} logo" class="mr-1 h-5 w-5 object-contain sm:inline-block"/>`
				: ''
			const winnerDisplay = match.winner || '-' // Handle empty winner

			// Return the HTML string for a single match row
			return `
      <div class="flex items-center border-b border-dotted border-zinc-700 py-3 text-zinc-400 ${conditionalClass}">

        <div class="w-20 flex-shrink-0 border-r pr-2 text-center text-sm md:text-base border-zinc-400">${match.formattedTime}</div>

        <div class="flex min-w-0 grow flex-col space-y-1 px-2">
          <div class="flex items-center gap-1 text-sm md:text-base">
            ${homeLogoHTML}
            <span class="flex-grow truncate font-medium text-white">${match.homeTeam}</span>
            <span class="ml-auto hidden flex-shrink-0 p-2 text-xs text-zinc-500 md:inline-block">${match.homeTeamForm}</span>
          </div>

          <div class="flex items-center gap-1 text-sm md:text-base">
            ${awayLogoHTML}
            <span class="flex-grow truncate text-white">${match.awayTeam}</span>
            <span class="ml-auto hidden flex-shrink-0 p-2 text-xs text-zinc-500 md:inline-block">${match.awayTeamForm}</span>
          </div>
        </div>

        <div class="flex w-32 min-w-0 flex-shrink-0 flex-col justify-center px-1 text-center md:w-40 lg:w-48">
          <div class="truncate bg-gradient-to-r from-red-600 to-fuchsia-500 bg-clip-text text-sm font-semibold text-transparent md:text-base">${winnerDisplay}</div>
          <div class="text-xs text-zinc-500 md:text-sm">(${match.record})</div>
        </div>

        <div class="hidden w-12 flex-shrink-0 items-center justify-end border-l pl-1 text-right text-xs md:flex lg:w-16 border-zinc-400">
          ${match.odds}
        </div>
      </div>
    `
		})
		.join('') // Join the array of match row strings into one big string

	// Return the complete HTML block for the league
	return `
    <div class="rounded-2xl bg-zinc-800 p-4">
      <div class="flex items-center border-b border-dotted border-zinc-700 pb-3">
        <h3 class="text-white">
          ${leagueName}
        </h3>
      </div>

      <div class="space-y-2">
        ${matchesHTML}
      </div>
    </div>
  `
}

// --- Core Fetching and Processing Function ---
async function getProcessedMatches(apiDate) {
	console.log(`Server: Fetching data for ${apiDate}...`) // Server-side log
	try {
		const response = await fetch(`${API_BASE_URL}${apiDate}`)
		if (!response.ok) {
			throw new Error(`HTTP error! status: ${response.status} for ${apiDate}`)
		}
		const data = await response.json()

		if (!data.events || data.events.length === 0) {
			console.log(`Server: No events found in API response for ${apiDate}.`)
			return {} // Return empty if no events
		}

		const allMatches = data.events.map(processEventData)
		const filteredMatches = allMatches.filter(filterMatch)

		if (filteredMatches.length === 0) {
			console.log(
				`Server: No qualifying matches found after filtering for ${apiDate}.`
			)
			return {} // Return empty if no filtered matches
		}

		// Group by league using the 'league' property (season.type)
		const matchesByLeague = filteredMatches.reduce((acc, match) => {
			const key = String(match.league) // Ensure key is string
			if (!acc[key]) {
				acc[key] = []
			}
			acc[key].push(match)
			return acc
		}, {})

		// Sort leagues by name for consistent display order
		const sortedKeys = Object.keys(matchesByLeague).sort((a, b) => {
			const nameA = matchesByLeague[a][0]?.leagueName || ''
			const nameB = matchesByLeague[b][0]?.leagueName || ''
			return nameA.localeCompare(nameB)
		})

		const sortedMatchesByLeague = {}
		for (const key of sortedKeys) {
			sortedMatchesByLeague[key] = matchesByLeague[key]
		}
		console.log(`Server: Successfully processed matches for ${apiDate}.`)
		return sortedMatchesByLeague
	} catch (error) {
		console.error(
			`Server: Error fetching/processing data for ${apiDate}:`,
			error
		)
		return {} // Return empty object on error to prevent breaking render
	}
}

// --- Fetch Data for Today and Tomorrow ---
// Note: Top-level await is available in Astro frontmatter
const today = new Date() // Use server's current date
const tomorrow = new Date()
tomorrow.setDate(today.getDate() + 1)

const todaysDateAPI = formatDateForAPI(today)
const tomorrowsDateAPI = formatDateForAPI(tomorrow)

// Fetch in parallel for efficiency
const [todayMatchesGrouped, tomorrowMatchesGrouped] = await Promise.all([
	getProcessedMatches(todaysDateAPI),
	getProcessedMatches(tomorrowsDateAPI),
])

// Check if we have matches to display for each day
const hasTodayMatches = Object.keys(todayMatchesGrouped).length > 0
const hasTomorrowMatches = Object.keys(tomorrowMatchesGrouped).length > 0
---

{/* üñºÔ∏è Render component */}
<main id='main' class='grid justify-center gap-8 py-8'>
	{/* üìÖ Today's matches */}
	<section aria-labelledby='today-heading'>
		<h2 id='today-heading' class='pb-4 pl-2 text-xl font-semibold text-white'>
			TODAY
		</h2>
		{
			hasTodayMatches ? (
				<div class='flex flex-col gap-2'>
					{/* üîÑ Loop through leagues and render the HTML string for each */}
					{Object.entries(todayMatchesGrouped).map(([leagueKey, matches]) => (
						<Fragment set:html={renderLeagueHTML(matches)} />
						/* The key prop doesn't apply directly here like with components,
             the distinction happens via the loop itself */
					))}
				</div>
			) : (
				<div class='rounded-lg border bg-zinc-800 p-4 text-center text-zinc-400'>
					No qualifying matches found for today.
				</div>
			)
		}
	</section>

	{/* üìÖ Tomorrow's matches */}
	<section aria-labelledby='tomorrow-heading'>
		<h2
			id='tomorrow-heading'
			class='pb-4 pl-2 text-xl font-semibold text-white'
		>
			TOMORROW
		</h2>
		{
			hasTomorrowMatches ? (
				<div class='flex flex-col gap-2'>
					{/* üîÑ Loop through leagues and render the HTML string for each */}
					{Object.entries(tomorrowMatchesGrouped).map(
						([leagueKey, matches]) => (
							<Fragment set:html={renderLeagueHTML(matches)} />
						)
					)}
				</div>
			) : (
				<div class='rounded-lg border bg-zinc-800 p-4 text-center text-zinc-400'>
					No qualifying matches found for tomorrow.
				</div>
			)
		}
	</section>
</main>
