---
// TODO: update styling
// TODO: show team logos & update mobile view
---

<script>
  // TODAY
  //  get & format today's date
  function getTodaysDate() {
    const today = new Date();

    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, "0");
    const day = today.getDate().toString().padStart(2, "0");

    return `${year}${month}${day}`;
  }
  const todaysDate = getTodaysDate();

  // TOMORROW
  //  get & format tomorrow's date
  function getTomorrowsDate() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);

    const year = tomorrow.getFullYear();
    const month = (tomorrow.getMonth() + 1).toString().padStart(2, "0");
    const day = tomorrow.getDate().toString().padStart(2, "0");

    return `${year}${month}${day}`;
  }
  const tomorrowsDate = getTomorrowsDate();

  // FETCH
  async function getFetch(date) {
    try {
      const res = await fetch(
        `https://site.api.espn.com/apis/site/v2/sports/soccer/all/scoreboard?dates=${date}`,
      );
      const data = await res.json();

      // PROJECTED WINNERS ARRAY
      // create an array to store matches grouped by league
      const matchesByLeague = [];
      // create an array to store matches
      const winnersTable = [];

      // MATCH OBJECT CONSTRUCTOR
      function Match(
        league,
        leagueName,
        formattedTime,
        homeTeamLogo,
        homeTeam,
        homeTeamForm,
        homeTeamWins,
        awayTeamLogo,
        awayTeam,
        awayTeamForm,
        awayTeamWins,
        winner,
        record,
        odds,
      ) {
        this.league = league;
        this.leagueName = leagueName;
        this.formattedTime = formattedTime;
        this.homeTeamLogo = homeTeamLogo;
        this.homeTeam = homeTeam;
        this.homeTeamForm = homeTeamForm;
        this.homeTeamWins = homeTeamWins;
        this.awayTeamLogo = awayTeamLogo;
        this.awayTeam = awayTeam;
        this.awayTeamForm = awayTeamForm;
        this.awayTeamWins = awayTeamWins;
        this.winner = winner;
        this.record = record;
        this.odds = odds;
      }

      // loop through events
      for (const event of data.events) {
        // LEAGUE
        const league = event.season.type;
        const leagueName = event.season.slug;
        const excludedLeagues = [
          "2023-ncaa-division-i-men",
          "2023-ncaa-division-i-women",
          "2023-24-russian-premier-league",
        ];

        // EVENT STATUS
        let postponed =
          event.competitions[0].status.type.description === "Postponed";
        let canceled =
          event.competitions[0].status.type.description === "Canceled";

        // TIME
        const matchTime = event.date;
        const utcTime = new Date(matchTime);
        const options = {
          hour12: true,
          hour: "numeric",
          minute: "2-digit",
        };
        const formattedTime = utcTime.toLocaleString("en-US", options);

        // EVENT NAME
        // const eventName = event.name;

        // HOME TEAM
        let homeTeamLogo = "";
        if (event.competitions[0].competitors[0].team.logo !== undefined) {
          homeTeamLogo = event.competitions[0].competitors[0].team.logo;
        }
        const homeTeam = event.competitions[0].competitors[0].team.name;
        let homeTeamForm = "";
        if (event.competitions[0].competitors[0].form !== undefined) {
          homeTeamForm = event.competitions[0].competitors[0].form;
        }
        const homeTeamWins = [...homeTeamForm].filter(
          (char) => char.toLowerCase() === "w",
        ).length;

        // AWAY TEAM
        let awayTeamLogo = "";
        if (event.competitions[0].competitors[1].team.logo !== undefined) {
          awayTeamLogo = event.competitions[0].competitors[1].team.logo;
        }
        const awayTeam = event.competitions[0].competitors[1].team.name;
        let awayTeamForm = "";
        if (event.competitions[0].competitors[1].form) {
          awayTeamForm = event.competitions[0].competitors[1].form;
        }
        const awayTeamWins = [...awayTeamForm].filter(
          (char) => char.toLowerCase() === "w",
        ).length;

        // PROJECTED WINNER
        let winner = "";
        if (
          (homeTeamWins >= 3 &&
            awayTeamWins <= 2 &&
            homeTeamWins - awayTeamWins >= 3) ||
          (homeTeamWins === 5 && awayTeamWins <= 3)
        ) {
          winner = homeTeam;
        }

        if (
          (awayTeamWins >= 3 &&
            homeTeamWins <= 2 &&
            awayTeamWins - homeTeamWins >= 3) ||
          (awayTeamWins === 5 && homeTeamWins <= 3)
        ) {
          winner = awayTeam;
        }

        // RECORD
        const record = `${homeTeamWins}-${awayTeamWins}`;

        // ODDS
        let odds = "";
        if (
          event.competitions[0].odds &&
          event.competitions[0].odds[0] &&
          event.competitions[0].odds[0].details !== undefined
        ) {
          odds = event.competitions[0].odds[0].details;
        }

        // MATCH OBJECT
        const matchObject = new Match(
          `${league}`,
          `${leagueName}`,
          `${formattedTime}`,
          `${homeTeamLogo}`,
          `${homeTeam}`,
          `${homeTeamForm}`,
          `${homeTeamWins}`,
          `${awayTeamLogo}`,
          `${awayTeam}`,
          `${awayTeamForm}`,
          `${awayTeamWins}`,
          `${winner}`,
          `${record}`,
          `${odds}`,
        );

        // ADD TO matchesByLeague & winnersTable ARRAYS
        // if league is not excluded, & match is not postponed, & there is a winner
        if (
          !excludedLeagues.includes(leagueName) &&
          !postponed &&
          !canceled &&
          winner
        ) {
          // if league does not already exist in matchesByLeague array, create array for league
          if (!matchesByLeague[league]) {
            matchesByLeague[league] = [];
          }
          // push the match object to its respective league array
          matchesByLeague[league].push(matchObject);
          // push the match to winnersTable array
          winnersTable.push(matchObject);
        }
      }

      // CREATE & APPEND ELEMENTS
      // section element
      const section = document.createElement("section");
      section.classList.add("flex", "flex-col", "pb-8");

      // h2 element
      const h2 = document.createElement("h2");
      h2.classList.add("pb-4", "pl-2", "text-xl");
      h2.textContent = date === todaysDate ? "TODAY" : "TOMORROW";

      // cardDiv element
      const cardDiv = document.createElement("div");
      cardDiv.classList.add(
        "flex",
        "flex-col",
        "divide-y",
        "rounded-3xl",
        "border",
        "px-2",
      );

      section.appendChild(h2);
      section.appendChild(cardDiv);

      // loop through leagues
      for (const league in matchesByLeague) {
        // create leagueTableDiv element
        const leagueTableDiv = document.createElement("div");
        leagueTableDiv.classList.add("py-4");
        cardDiv.appendChild(leagueTableDiv);

        // leagueRowDiv element
        const leagueRowDiv = document.createElement("div");
        leagueRowDiv.classList.add("flex", "items-center", "pb-2");
        leagueTableDiv.appendChild(leagueRowDiv);

        // // flagLogoColumnDiv element
        // const flagLogoColumnDiv = document.createElement("div");
        // flagLogoColumnDiv.classList.add("w-20", "text-center");
        // flagLogoColumnDiv.textContent = "flag / logo";
        // leagueRowDiv.appendChild(flagLogoColumnDiv);
        // // countryLeagueColumnDiv element
        // const countryLeagueColumnDiv = document.createElement("div");
        // countryLeagueColumnDiv.classList.add("flex", "flex-col", "pl-4");
        // leagueRowDiv.appendChild(countryLeagueColumnDiv);
        // // countryDiv element
        // const countryDiv = document.createElement("div");
        // countryDiv.textContent = "Country";
        // countryLeagueColumnDiv.appendChild(countryDiv);

        // leagueDiv element
        const leagueDiv = document.createElement("div");
        leagueDiv.textContent = `${matchesByLeague[league][0].leagueName}`;
        // countryLeagueColumnDiv.appendChild(leagueDiv);
        leagueRowDiv.appendChild(leagueDiv);

        // loop through matches
        for (const match of matchesByLeague[league]) {
          // create matchRowDiv element
          const matchRowDiv = document.createElement("div");
          matchRowDiv.classList.add(
            "flex",
            "items-center",
            "divide-x",
            "h-24",
            "mb-2",
            "lg:h-16",
            "lg:mb-0",
          );
          leagueTableDiv.appendChild(matchRowDiv);

          // timeColumnDiv element
          const timeColumnDiv = document.createElement("div");
          timeColumnDiv.classList.add("w-20", "text-center");
          timeColumnDiv.textContent = `${match.formattedTime}`;
          matchRowDiv.appendChild(timeColumnDiv);

          // homeAwayColumnDiv element
          const homeAwayColumnDiv = document.createElement("div");
          homeAwayColumnDiv.classList.add("flex", "flex-col", "lg:w-96");
          matchRowDiv.appendChild(homeAwayColumnDiv);

          // homeDiv element
          const homeDiv = document.createElement("div");
          homeDiv.classList.add("flex", "gap-1", "px-1");
          const homeLogoDiv = document.createElement("div");
          homeLogoDiv.classList.add("flex", "items-center");
          const homeLogoImg = document.createElement("img");
          homeLogoImg.classList.add("h-6", "object-contain");
          homeLogoImg.src = match.homeTeamLogo;
          homeLogoImg.alt = "Logo";
          homeLogoDiv.appendChild(homeLogoImg);
          // homeDiv.appendChild(homeLogoDiv);
          const homeNameDiv = document.createElement("div");
          homeNameDiv.classList.add("w-36", "lg:w-72");
          homeNameDiv.textContent = `${match.homeTeam}`;
          homeDiv.appendChild(homeNameDiv);
          const homeFormDiv = document.createElement("div");
          homeFormDiv.classList.add("hidden", "lg:block", "ml-auto");
          homeFormDiv.textContent = `${match.homeTeamForm}`;
          homeDiv.appendChild(homeFormDiv);
          homeAwayColumnDiv.appendChild(homeDiv);

          // awayDiv element
          const awayDiv = document.createElement("div");
          awayDiv.classList.add("flex", "gap-1", "px-1");
          const awayLogoDiv = document.createElement("div");
          awayLogoDiv.classList.add("flex", "items-center");
          const awayLogoImg = document.createElement("img");
          awayLogoImg.classList.add("h-6", "object-contain");
          awayLogoImg.src = match.awayTeamLogo;
          awayLogoImg.alt = "Logo";
          awayLogoDiv.appendChild(awayLogoImg);
          // awayDiv.appendChild(awayLogoDiv);
          const awayNameDiv = document.createElement("div");
          awayNameDiv.classList.add("w-36", "lg:w-72");
          awayNameDiv.textContent = `${match.awayTeam}`;
          awayDiv.appendChild(awayNameDiv);
          const awayFormDiv = document.createElement("div");
          awayFormDiv.classList.add("hidden", "lg:block", "ml-auto");
          awayFormDiv.textContent = `${match.awayTeamForm}`;
          awayDiv.appendChild(awayFormDiv);
          homeAwayColumnDiv.appendChild(awayDiv);

          // winnerRecordColumnDiv element
          const winnerRecordColumnDiv = document.createElement("div");
          winnerRecordColumnDiv.classList.add(
            "flex",
            "w-40",
            "lg:w-72",
            "flex-col",
            "text-center",
            "px-1",
          );
          matchRowDiv.appendChild(winnerRecordColumnDiv);

          // winnerDiv element
          const winnerDiv = document.createElement("div");
          winnerDiv.textContent = `${match.winner}`;
          winnerRecordColumnDiv.appendChild(winnerDiv);

          // recordDiv element
          const recordDiv = document.createElement("div");
          recordDiv.textContent = `${match.record}`;
          winnerRecordColumnDiv.appendChild(recordDiv);

          // oddsColumnDiv element
          const oddsColumnDiv = document.createElement("div");
          oddsColumnDiv.classList.add(
            "hidden",
            "lg:block",
            "w-12",
            "lg:w-16",
            "pr-1",
            "text-right",
          );
          oddsColumnDiv.textContent = `${match.odds}`;
          matchRowDiv.appendChild(oddsColumnDiv);
        }
      }

      // append to element with id "main"
      const main = document.getElementById("main");
      main.appendChild(section);

      // CONSOLE
      // TODAY OR TOMORROW
      date === todaysDate ? console.log("TODAY") : console.log("TOMORROW");

      // // TABLE TO BE PRINTED TO CONSOLE
      // const tableToPrint = winnersTable.map(
      //   ({
      //     leagueName,
      //     formattedTime,
      //     homeTeamForm,
      //     homeTeam,
      //     awayTeam,
      //     awayTeamForm,
      //     winner,
      //     record,
      //     odds,
      //   }) => {
      //     return {
      //       leagueName,
      //       formattedTime,
      //       homeTeamForm,
      //       homeTeam,
      //       awayTeam,
      //       awayTeamForm,
      //       winner,
      //       record,
      //       odds,
      //     };
      //   },
      // );

      // // console.table
      // console.table(tableToPrint);

      // TABLE BY LEAGUE TO BE PRINTED TO CONSOLE
      for (const league in matchesByLeague) {
        const tablebyLeagueToPrint = matchesByLeague[league].map(
          ({
            leagueName,
            formattedTime,
            homeTeamForm,
            homeTeam,
            awayTeam,
            awayTeamForm,
            winner,
            record,
            odds,
          }) => {
            return {
              leagueName,
              formattedTime,
              homeTeamForm,
              homeTeam,
              awayTeam,
              awayTeamForm,
              winner,
              record,
              odds,
            };
          },
        );

        // console.table
        console.table(tablebyLeagueToPrint);
      }
    } catch (err) {
      console.log(`error ${err}`);
    }
  }

  (async () => {
    await getFetch(todaysDate);
    await getFetch(tomorrowsDate);
  })();
</script>
